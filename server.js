// ============================
// server.js – Vapi Tone-Aware Batch Dialer + Webhook (FULL EDITION)
// Includes pauseMs support, hotline routing, address/payment formatting, SSML builder, Sheets logging,
// currency humanization, post-date scheduling metadata, readback with last4 & controlled pauses.
// ============================

require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const { google } = require("googleapis");
const fetch = require("node-fetch"); // v2 pinned in package.json
const path = require("path");

// ==== Load HUGE flow file generated by build_flow.js ====
// If this require fails (first run), we fallback to a tiny flow and still respond.
let salesFlow;
try {
  salesFlow = require(path.join(__dirname, "flows", "flows_alex_sales.json"));
  console.log("✅ Loaded sales flow JSON");
} catch (err) {
  console.warn("⚠️ flows/flows_alex_sales.json not found yet. Run: node build_flow.js");
  salesFlow = {
    meta: { version: "bootstrap", hotline: "1-866-379-5131" },
    states: {
      start: {
        say: "Hello, this is Alex with Health America. How are you doing today?",
        tone: "enthusiastic",
        pauseMs: 600,
        next: "reason_for_call"
      },
      reason_for_call: {
        say: "The reason I’m calling is to follow up on the information we sent out. Did you get that okay?",
        tone: "enthusiastic",
        pauseMs: 600,
        branches: { yes: "qualify_intro", no: "qualify_intro", service: "hotline_offer", hesitate: "qualify_intro" }
      },
      hotline_offer: {
        say: "Absolutely. Our customer care and reorder line is one eight six six… three seven nine… five one three one. I’ll repeat that normally: 1-866-379-5131. I can also help you right now—would you like me to take care of this for you?",
        tone: "empathetic",
        pauseMs: 900,
        branches: { yes: "qualify_intro", no: "farewell_soft", hesitate: "qualify_intro" }
      },
      qualify_intro: {
        say: "Great—let me ask a few quick questions to better understand your health. I’ll keep it simple and quick.",
        tone: "curious",
        pauseMs: 600,
        next: "q1_joint"
      },
      q1_joint: { say: "Do you have arthritis or joint pain and stiffness?", tone: "curious", pauseMs: 600, capture: "joint_pain", next: "q2_pain" },
      q2_pain: { say: "On a scale of one to ten, what’s your pain today?", tone: "curious", pauseMs: 600, capture: "pain_level", next: "q3_age" },
      q3_age: { say: "If you don’t mind me asking, how old are you? You sound great—much younger than that.", tone: "curious", pauseMs: 900, capture: "age_years", next: "needs_confirm" },
      needs_confirm: {
        say: "So we’ll focus on your top concern first. That matches what I’m seeing.",
        tone: "empathetic",
        pauseMs: 600,
        next: "farewell_soft"
      },
      farewell_soft: {
        say: "Thank you for your time today. If you need anything or want to reorder later, we’re at 1-866-379-5131.",
        tone: "empathetic",
        pauseMs: 600,
        end: true
      }
    }
  };
}

const app = express();
app.use(bodyParser.json());

// ============================
// Google Sheets Setup
// ============================
function getAuth() {
  const base64Key = process.env.GOOGLE_SERVICE_ACCOUNT;
  if (!base64Key) throw new Error("Missing GOOGLE_SERVICE_ACCOUNT env var (base64 JSON).");
  const jsonKey = JSON.parse(Buffer.from(base64Key, "base64").toString("utf8"));
  return new google.auth.GoogleAuth({
    credentials: jsonKey,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });
}

const SHEET_ID = process.env.SPREADSHEET_ID;
const SHEET_NAME = "outbound_list"; // must match tab name in Google Sheets

// ============================
// Vapi IDs (from .env)
// ============================
const ASSISTANT_ID = process.env.ASSISTANT_ID;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const VAPI_API_KEY = process.env.VAPI_API_KEY;

// ============================
// Apps Script URL
// ============================
const APPS_SCRIPT_URL = process.env.APPS_SCRIPT_URL;

// ============================
// Sanity check
// ============================
app.get("/", (req, res) => {
  res.send("✅ Vapi Webhook is running! Endpoints: /start-batch, /vapi-webhook, /vapi-callback");
});

// ============================
// Human currency speech (avoid the word 'point')
// ============================
function humanizeCurrency(amount) {
  // amount can be number or string "299.99"
  const n = typeof amount === "number" ? amount : Number(String(amount).replace(/[^0-9.]/g, ""));
  if (!isFinite(n)) return String(amount);
  const dollars = Math.floor(n);
  const cents = Math.round((n - dollars) * 100);
  const centsWords = cents === 0 ? "" : (cents < 10 ? `oh ${cents}` : `${cents}`) + " cents";
  const dollarsWords = dollars.toLocaleString("en-US");
  if (cents === 0) return `${dollarsWords} dollars`;
  return `${dollarsWords} dollars and ${centsWords}`;
}

// ============================
// Format name, address, phone, last4, with natural speech pauses
// ============================
function spacedDigits(str, group = 4) {
  return String(str || "").replace(/\D/g, "").match(new RegExp(`.{1,${group}}`, "g"))?.join(" ") || "";
}
function last4(str) {
  const digits = String(str || "").replace(/\D/g, "");
  return digits.slice(-4);
}
function humanState(state) {
  // expand two-letter state to full if possible (fallback to as-said)
  const map = {
    AL:"Alabama", AK:"Alaska", AZ:"Arizona", AR:"Arkansas", CA:"California", CO:"Colorado", CT:"Connecticut",
    DE:"Delaware", FL:"Florida", GA:"Georgia", HI:"Hawaii", ID:"Idaho", IL:"Illinois", IN:"Indiana",
    IA:"Iowa", KS:"Kansas", KY:"Kentucky", LA:"Louisiana", ME:"Maine", MD:"Maryland", MA:"Massachusetts",
    MI:"Michigan", MN:"Minnesota", MS:"Mississippi", MO:"Missouri", MT:"Montana", NE:"Nebraska", NV:"Nevada",
    NH:"New Hampshire", NJ:"New Jersey", NM:"New Mexico", NY:"New York", NC:"North Carolina", ND:"North Dakota",
    OH:"Ohio", OK:"Oklahoma", OR:"Oregon", PA:"Pennsylvania", RI:"Rhode Island", SC:"South Carolina",
    SD:"South Dakota", TN:"Tennessee", TX:"Texas", UT:"Utah", VT:"Vermont", VA:"Virginia", WA:"Washington",
    WV:"West Virginia", WI:"Wisconsin", WY:"Wyoming", DC:"District of Columbia"
  };
  const key = String(state || "").trim().toUpperCase();
  return map[key] || state;
}

// ============================
// SSML builder with pauseMs and prosody (tone)
// ============================
const toneMap = {
  enthusiastic: { pitch: "+5%", rate: "+15%", volume: "loud" },
  empathetic: { pitch: "-5%", rate: "-10%", volume: "soft" },
  authoritative: { pitch: "-3%", rate: "0%",  volume: "loud" },
  calm_confidence: { pitch: "0%",  rate: "-5%", volume: "medium" },
  absolute_certainty: { pitch: "-8%", rate: "-5%", volume: "x-loud" },
  neutral: { pitch: "0%", rate: "0%", volume: "medium" },
};

function escapeXml(s) {
  return String(s).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function toSSML(text, settings, pauseMs=0) {
  const pitch = settings.pitch || "0%";
  const rate  = settings.rate  || "0%";
  const vol   = settings.volume || "medium";
  const pause = Number(pauseMs) > 0 ? `<break time="${Math.min(pauseMs, 4000)}ms"/>` : "";
  return `<speak><prosody pitch="${pitch}" rate="${rate}" volume="${vol}">${escapeXml(text)}</prosody>${pause}</speak>`;
}

// ============================
// State machine
// ============================
const sessions = {};
function getSession(sessionId) {
  if (!sessions[sessionId]) sessions[sessionId] = { state: "start", data: {}, createdAt: Date.now() };
  return sessions[sessionId];
}

// Helper: map general userInput to branches
function chooseBranch(branches, userInput="") {
  const input = (userInput || "").toLowerCase();
  if (!branches) return null;

  if (/\b(yes|yeah|yep|sure|correct|ok)\b/.test(input)) return branches.yes || null;
  if (/\b(no|nope|nah|incorrect)\b/.test(input)) return branches.no || null;
  if (/\b(service|support|agent|operator|representative|rep|supervisor|call|phone|number)\b/.test(input)) return branches.service || "hotline_offer";
  if (/\b(wait|hold|not sure|maybe|later|think)\b/.test(input)) return branches.hesitate || null;

  // Fallback to “other” if provided
  if (branches.other) return branches.other;
  return null;
}

function handleTransition(session, userInput = "") {
  const current = salesFlow.states[session.state];
  if (!current) {
    session.state = "catch_all";
    return;
  }

  // capture slots
  if (current.capture) {
    session.data[current.capture] = userInput;
  }

  // logic hooks (subset – actual heavy lifting is in flow JSON; server just recognizes keys)
  if (current.logic === "format_human_currency") {
    if (session.data.final_total) {
      session.data.human_price = humanizeCurrency(session.data.final_total);
    }
  }
  if (current.logic === "extract_last4") {
    session.data.last4 = last4(session.data.creditCardNumber || "");
  }
  if (current.logic === "compose_ship_line") {
    const stateFull = humanState(session.data.shipState || "");
    const city = session.data.shipCity || "";
    const street = session.data.shipAddress1 || "";
    const zip = session.data.shipZip || "";
    session.data.ship_address_line = `${street}, ${city}, ${stateFull} ${zip}`.replace(/\s+/g, " ").trim();
  }

  // explicit routing
  if (current.branches) {
    const route = chooseBranch(current.branches, userInput);
    if (route) {
      session.state = route;
      return;
    }
    // If user didn’t clearly say yes/no/service, proceed or hesitate path
    session.state = current.branches.hesitate || current.next || "catch_all";
    return;
  }

  // default next
  if (current.next) session.state = current.next;
  else session.state = "catch_all";
}

// ============================
// Batch Dialer
// ============================
app.get("/start-batch", async (req, res) => {
  try {
    if (!SHEET_ID) throw new Error("Missing SPREADSHEET_ID");
    if (!VAPI_API_KEY) throw new Error("Missing VAPI_API_KEY");

    const auth = await getAuth();
    const sheets = google.sheets({ version: "v4", auth });

    const range = `${SHEET_NAME}!A:Z`;
    const response = await sheets.spreadsheets.values.get({ spreadsheetId: SHEET_ID, range });
    const rows = response.data.values;
    if (!rows || rows.length < 2) return res.send("No rows found");

    const headers = rows[0].map((h) => h.toLowerCase());
    const dataRows = rows.slice(1);

    const idIdx     = headers.indexOf("id");
    const phoneIdx  = headers.indexOf("phone");
    const statusIdx = headers.indexOf("status");

    if (idIdx === -1 || phoneIdx === -1 || statusIdx === -1) {
      throw new Error("❌ Missing required headers in outbound_list (need id, phone, status).");
    }

    // Pick next 3 pending
    const nextThree = dataRows
      .map((row, i) => ({ row, i }))
      .filter((r) => !r.row[statusIdx] || r.row[statusIdx].toLowerCase() === "pending")
      .slice(0, 3);

    if (nextThree.length === 0) return res.send("No pending contacts");

    const results = [];
    for (let entry of nextThree) {
      const row = entry.row;
      const rowIndex = entry.i + 2; // header offset + 1-based index
      const id    = row[idIdx];
      const phone = row[phoneIdx];

      if (!phone) {
        console.warn(`⚠️ Skipping id=${id} (no phone)`);
        results.push({ id, phone, error: "No phone number" });
        continue;
      }

      const payload = {
        assistantId: ASSISTANT_ID,
        phoneNumberId: PHONE_NUMBER_ID,
        customer: { number: phone },
        metadata: { id, rowIndex },
      };

      const vapiResp = await fetch("https://api.vapi.ai/call", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${VAPI_API_KEY}`,
        },
        body: JSON.stringify(payload),
      });

      const vapiResultText = await vapiResp.text();
      let vapiJson;
      try { vapiJson = JSON.parse(vapiResultText); } catch { vapiJson = { raw: vapiResultText }; }

      results.push({ id, phone, response: vapiJson });
    }

    res.json({ started: results });
  } catch (err) {
    console.error("Batch error:", err);
    res.status(500).send("Error starting batch: " + (err.message || String(err)));
  }
});

// ============================
// Vapi callback → log to Sheets + forward to Apps Script
// ============================
app.post("/vapi-callback", async (req, res) => {
  try {
    console.log("📩 Vapi callback:", JSON.stringify(req.body, null, 2));
    const { metadata, status, result } = req.body || {};
    const id       = metadata?.id;
    const rowIndex = metadata?.rowIndex;
    const timestamp = new Date().toISOString();

    if (!SHEET_ID) throw new Error("Missing SPREADSHEET_ID");
    if (!id || !rowIndex) throw new Error("Missing metadata.id or rowIndex");

    const auth = await getAuth();
    const sheets = google.sheets({ version: "v4", auth });

    const headerResp = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: `${SHEET_NAME}!A1:Z1`,
    });
    const headers = headerResp.data.values[0].map((h) => h.toLowerCase());

    const statusIdx      = headers.indexOf("status") + 1;
    const attemptsIdx    = headers.indexOf("attempts") + 1;
    const lastAttemptIdx = headers.indexOf("lastattemptat") + 1;
    const resultIdx      = headers.indexOf("result") + 1;

    if (statusIdx <= 0 || attemptsIdx <= 0 || lastAttemptIdx <= 0 || resultIdx <= 0) {
      throw new Error("❌ Missing required headers (status, attempts, lastattemptat, result)");
    }

    const attemptsResp = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: `${SHEET_NAME}!R${rowIndex}C${attemptsIdx}`,
    });
    const currentAttempts = parseInt(attemptsResp.data.values?.[0]?.[0] || "0", 10);

    const updates = [
      { range: `${SHEET_NAME}!R${rowIndex}C${statusIdx}`,      values: [[status || "completed"]] },
      { range: `${SHEET_NAME}!R${rowIndex}C${attemptsIdx}`,    values: [[currentAttempts + 1]] },
      { range: `${SHEET_NAME}!R${rowIndex}C${lastAttemptIdx}`, values: [[timestamp]] },
      { range: `${SHEET_NAME}!R${rowIndex}C${resultIdx}`,      values: [[result || ""]] },
    ];

    await sheets.spreadsheets.values.batchUpdate({
      spreadsheetId: SHEET_ID,
      requestBody: { valueInputOption: "RAW", data: updates },
    });

    if (APPS_SCRIPT_URL) {
      try {
        await fetch(APPS_SCRIPT_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(req.body),
        });
        console.log("📤 Forwarded callback to Apps Script");
      } catch (e) {
        console.error("⚠️ Forward to Apps Script failed:", e);
      }
    }

    res.send("Row updated + callback forwarded");
  } catch (err) {
    console.error("Callback error:", err);
    res.status(500).send("Error handling callback: " + err.message);
  }
});

// ============================
// Vapi → Conversation Webhook (tone-aware, pauseMs-aware)
// ============================
app.post("/vapi-webhook", (req, res) => {
  const { sessionId, userInput } = req.body || {};
  if (!sessionId) return res.status(400).json({ error: "Missing sessionId" });

  const session = getSession(sessionId);
  if (typeof userInput === "string" && userInput.trim()) handleTransition(session, userInput);

  const current = salesFlow.states[session.state];
  if (!current) {
    const text = "I didn’t quite catch that. If you need help, our number is 1-866-379-5131.";
    const settings = toneMap.neutral;
    return res.json({
      say: text,
      tone: "neutral",
      voice: settings,
      ssml: toSSML(text, settings, 600),
      pauseMs: 600,
      format: "ssml",
      end: false
    });
  }

  // Template variable interpolation
  const sayRaw = current.say || "";
  const tone   = current.tone || "neutral";
  const pause  = Number(current.pauseMs) || 0;
  const settings = toneMap[tone] || toneMap.neutral;

  const text = sayRaw.replace(/\{\{(\w+)\}\}/g, (_, k) => {
    const v = session.data[k];
    return v == null ? "" : String(v);
  });

  return res.json({
    say: text,
    tone,
    voice: settings,
    pauseMs: pause,
    ssml: toSSML(text, settings, pause),
    format: "ssml",
    end: !!current.end
  });
});

// ============================
// Start Server
// ============================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`🚀 Server running on ${PORT}`));
